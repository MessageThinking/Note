1.springMVC是表现层的框架
工作原理：
客户端请求提交到DispatcherServlet
由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller
DispatcherServlet将请求提交到Controller
Controller调用业务逻辑处理后，返回ModelAndView
DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图
视图负责将结果显示到客户端
2.springMVC的映射关系：
1.ControllerClassNameHandlerMapping(继承AbstractController)
通过xxController之前相似的名称进行映射.
2.SimpleUrlHandlerMapping(继承AbstractController),会通过配置文件
直接关联到相关的前段页面中.
当然,这里只有单纯的数据展示这可以这么做就是说直接数据展示可以这么做,如果
说需要动态的展示页面的数据的话,则需要使用RequestMapping来配置路径来调用Controller
进行相关的数据展示.
springMVC拦截器：实现HandlerInterceptor接口,重写其中prehandle(handler执行之前调用) posthandle afterCompletion
方法配置：<!-- 拦截器 -->  
        <mvc:interceptors>  
            <!-- 多个拦截器，顺序执行 -->  
            <mvc:interceptor>  
                <mvc:mapping path="/**"/>  
                <bean class="com.mvc.interceptor.xx拦截的类"></bean>  
            </mvc:interceptor>  
        </mvc:interceptors>  
spring基本上都是通过拦截器拦截url进行处理的
解决:加载静态资源的问题：
1.在servlet中直接配置路径把不需要拦截的都配置了
<servlet-mapping>    
    <servlet-name>default</servlet-name>   
    <url-pattern>*.png</url-pattern>      
</servlet-mapping>     
<servlet-mapping>        
    <servlet-name>default</servlet-name>     
    <url-pattern>*.js</url-pattern>     
</servlet-mapping>     
<servlet-mapping>         
    <servlet-name>default</servlet-name>        
    <url-pattern>*.css</url-pattern>       
</servlet-mapping> 
2.在servlet中配置路径
<servlet-mapping>  
    <servlet-name>mvc-dispatcher</servlet-name>  
    <url-pattern>/.do</url-pattern>  
</servlet-mapping>
3.在springMVC中配置<MVC:resources mapping=""   localtion="">:(location是指webroot下的所在路径,mapping是指要处理的映射。)
过滤器和拦截器之间的区别：
①拦截器是基于java的反射机制的，而过滤器是基于函数回调。
②拦截器不依赖与servlet容器，过滤器依赖与servlet容器。
③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。
④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。
⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。
⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，
可以调用业务逻辑   